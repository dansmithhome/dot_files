if [[ ${PS1} ]]
then

   function build-tags(){
        ( cd $ALEX_SITE_DIR; etags --output $ALEX_SITE_DIR/TAGS $(find . -name \*.pm -o -name \*.js) )
    }

    function tickets(){
             curl 2> /dev/null  -#LG "http://askalexander.org:8800/alex/report/8?format=csv"  | awk -F, 'NR > 1 {printf "%-3.3s %9.9s %s\n",$3,$9,$4}' |sort -n 
    }

    function go(){
        local NEWSITE=$( echo "${1}" | sed 's;/.*;;' )

        if [[ ! -d /mnt/www/sites/${NEWSITE} ]]
        then
            echo  "${NEWSITE}: no such site" 1>&2
            return
        fi


        if [[ -n ${SITE}   ]]
        then
             CDPATH=$( echo "${CDPATH}" | sed -e "s;[:]*/mnt/www/sites/${SITE}/lib/Alex;;g" -e "s;[:]*/mnt/www/sites/${SITE};;g"  )
        fi
        CDPATH="${CDPATH}:/mnt/www/sites/${NEWSITE}:/mnt/www/sites/${NEWSITE}/lib/Alex"
        export SITE="${NEWSITE}"
        export ALEX_SITE_DIR="/mnt/www/sites/${NEWSITE}"
        export ALEX_LIB="${ALEX_SITE_DIR}/lib"
        cd "${ALEX_SITE_DIR}"
    }



    # Display all the logs for today.  Useful for quickly checking for errors.
    function lastlogs (){ 
        less /mnt/alex/logs/*-$(date +%b-%d-%y)
    }

    # Convert a PDF directory back to its document id
    function dirdid(){
        local D=${1}

        printf "%d\n" $(echo ${D} | rev | sed -e 's;/;;g' -e 's/^/0x/')
    }

    # Convert a directory id (DID) to a directory location for a PDF
    function pdfdir(){
        local DID=${1}
        local PDFROOT=/data/alex/pdf

        echo ${PDFROOT}$(printf "%X\n" ${DID} | rev | sed -e 's;\(.\);/\1;g')/pdf
    }


    # Convert a directory id (DID) to a directory location for an image
    function imgdir(){
        local DID=${1}
        local IMGROOT=/data/alex/img

        echo ${IMGROOT}$(printf "%X\n" ${DID} | rev | sed -e 's;\(.\);/\1;g')
    }

    # Edit the httpd.conf file
    function httpd.conf(){
        command sudo emacs /etc/httpd/conf/httpd.conf
    }


    # Find a document based on its upload filename
    function is-uploaded(){
        local ARG=$(echo "$*" | sed 's/\([^~]*~[^~]*\).*/\1/')

        echo ${ARG}
        mysql -t -e 'call isUploaded("'"${ARG}"'");' | sed 's/^/        /'
    }

    
    # Find where alexuse references the given string.  Ignores binary files, 3rd party sources, and other noise.

    function alexuse() {
        local EXCLUDE_DIRS=".git tmpl_compiled OUTDATED sphinx cache curl GeoIP wiki phpBB3"
        local FIND_EXCL_PATTERN=
        local f
        local GREP_ARGS=

        if [[ ${1} = -l ]]
        then
            shift
            GREP_ARGS=-l
        fi

        for f in ${EXCLUDE_DIRS}
        do
            if [[ ${FIND_EXCL_PATTERN} ]]
            then
                FIND_EXCL_PATTERN="${FIND_EXCL_PATTERN} -o"
            fi
            FIND_EXCL_PATTERN="${FIND_EXCL_PATTERN} -name ${f} -prune" 
        done
        
        if [[ ${SITE} ]]
        then
                sudo /usr/bin/find "/mnt/www/sites/${SITE}" \( -type d ${FIND_EXCL_PATTERN}  \) -o -type f ! -name \*~ ! -name \*.min.js -print0 |  sudo xargs -0 grep  -IH --color  ${GREP_ARGS}  "\\b${*}\\b" 
        else
                echo '${SITE} should be set using go command.'  1>&2
        fi


    }


    # Trim stdin to fit within width of terminal

    cutwidth() {
        local WIDTH=${1}

        if [[ ! -n ${WIDTH} ]]
        then
            WIDTH=`stty size | awk '{print $2}'`
        fi
        cut -c 1-${WIDTH}
    }

    function emgrep() {
        emacs $( grep ${*} | awk -F: '{print ${1}}' | sort -u )
    }

    function title(){
        echo -n -e "\033]0;${1}\007"
    }

    # Fetch a file over HTTP.
    # usage: hget URL [local-name]
    #
    function hget()
    {
	    local LNAME 

	    if [[ ${2} ]]
	    then
	        LNAME="${2}"
	    else
	        LNAME=`basename ${1}`
	    fi		
	    curl -LG "${1}" > "${LNAME}"
    }


    # Display an Apache HTTPD log.  
	# Usage: htlog         - tail most recent error log
    #        htlog -f      - tail -f
    #        htlog -h name - log for host
    #        htlog -a      - access log rather than error log
    #        htlog -q      - do not show any preceeding context, implies -f

    function htlog()
    {

	local PREFIX=error_log
	local TAIL_ARGS=
	local SITENAME=${SITE:=alex}
	local FILE
	local LINES=20

	OPTS=$(getopt qfh:s:an: "$@")
	if [[ $? -ne 0 ]]
	then
	    return
	fi
	eval set -- "${OPTS}"

	while [[ $# -gt 0 ]]
	do
	    : debug: ${1}

	    case "${1}" in
		-f) TAIL_ARGS=-f;;
        -q) TAIL_ARGS=-f
            LINES=0
            ;;
		-h|-s) SITENAME=${2}; shift;;
		-a) PREFIX=access_log;;
		-n) LINES=${2}; shift;;
		--) ;;
		\?) echo "usage: htlog [-fa] [-h sitename]"; return ;;
		-*) echo "unrecognized argument: ${1}"; return;;
            esac
	    shift
	done

	local SITEDIR=/mnt/www/logs/${SITENAME}/
	if [[ ! -d ${SITEDIR} ]]
	then
	    echo ${SITENAME}: no such site
	    return
	fi
	FILE=`ls -1c ${SITEDIR}/${PREFIX}* | head -1`
	if [[ ! -f ${FILE} ]]
	then 
	    echo No such log
	else
	    echo FILE is ${FILE}, SITENAME is ${SITENAME}, SITEDIR is ${SITEDIR}
	    tail ${TAIL_ARGS} --lines=${LINES} ${FILE} | sed -e 's/ referer:.*//' -e 's/\\n/\
/g' -e 's/\\t/    /'
	fi
    }


fi


